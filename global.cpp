#include "global.h"

// variables for global usage
const float FPS = 60.0;
const int WIDTH = 1000;
const int HEIGHT = 750;
//ALLEGRO_EVENT_QUEUE *event_queue = NULL;
ALLEGRO_TIMER *fps = NULL;
bool key_state[ALLEGRO_KEY_MAX] = {false};
bool judge_next_window = false;
bool map_redraw = true;
bool book_redraw = false;
bool shop_redraw = false;
bool number1 = true;
bool number2 = false;
bool number3 = false;
bool magic_show = false;
bool merchant_show = false;
bool setting_show = false;
bool win_show = false;
bool fail_show = false;
bool volumn_change = false;
bool game_end = false;
bool scene_move = false;
int sound_mul = 1;
int npc_now;
int msg = 0;
int coins_now = 970;
int energy_now = 10000;
int change_cat = 0;
int new_cat[2] = {0};
int box_redraw[2] = {0};
int coin_redraw[30] = {0};
int mapp[22][26]={0};
// 0 None 1 Coin 2 Magic 3 Merchant 4 Tree
Pos magic_pos[5];
Pos merchant_pos[2];
Pos box_pos[2];
Pos coin_pos[30];

void pos_init() {
    magic_pos[0].x = 20;
    magic_pos[0].y = 24;
    magic_pos[1].x = 5;
    magic_pos[1].y = 4;
    magic_pos[2].x = 10;
    magic_pos[2].y = 13;
    magic_pos[3].x = 12;
    magic_pos[3].y = 23;
    magic_pos[4].x = 16;
    magic_pos[4].y = 2;
    merchant_pos[0].x = 14;
    merchant_pos[0].y = 4;
    merchant_pos[1].x = 20;
    merchant_pos[1].y = 11;

    box_pos[0].x = 5;
    box_pos[0].y = 16;
    box_pos[1].x = 12;
    box_pos[1].y = 4;

    coin_pos[0].x = 1;
    coin_pos[0].y = 5;
    coin_pos[1].x = 1;
    coin_pos[1].y = 8;
    coin_pos[2].x = 1;
    coin_pos[2].y = 15;
    coin_pos[3].x = 14;
    coin_pos[3].y = 2;
    coin_pos[4].x = 2;
    coin_pos[4].y = 18;
    coin_pos[5].x = 8;
    coin_pos[5].y = 6;
    coin_pos[6].x = 3;
    coin_pos[6].y = 10;
    coin_pos[7].x = 3;
    coin_pos[7].y = 15;
    coin_pos[8].x = 7;
    coin_pos[8].y = 18;
    coin_pos[9].x = 5;
    coin_pos[9].y = 7;
    coin_pos[10].x = 5;
    coin_pos[10].y = 20;
    coin_pos[11].x = 7;
    coin_pos[11].y = 4;
    coin_pos[12].x = 7;
    coin_pos[12].y = 10;
    coin_pos[13].x = 7;
    coin_pos[13].y = 14;
    coin_pos[14].x = 8;
    coin_pos[14].y = 23;
    coin_pos[15].x = 9;
    coin_pos[15].y = 2;
    coin_pos[16].x = 10;
    coin_pos[16].y = 19;
    coin_pos[17].x = 11;
    coin_pos[17].y = 10;
    coin_pos[18].x = 12;
    coin_pos[18].y = 13;
    coin_pos[19].x = 12;
    coin_pos[19].y = 20;
    coin_pos[20].x = 14;
    coin_pos[20].y = 10;
    coin_pos[21].x = 15;
    coin_pos[21].y = 13;
    coin_pos[22].x = 16;
    coin_pos[22].y = 6;
    coin_pos[23].x = 16;
    coin_pos[23].y = 16;
    coin_pos[24].x = 17;
    coin_pos[24].y = 23;
    coin_pos[25].x = 18;
    coin_pos[25].y = 10;
    coin_pos[26].x = 18;
    coin_pos[26].y = 20;
    coin_pos[27].x = 20;
    coin_pos[27].y = 8;
    coin_pos[28].x = 20;
    coin_pos[28].y = 15;
    coin_pos[29].x = 20;
    coin_pos[29].y = 20;

}

void map_init() {
    mapp[0][0]=4;
mapp[0][1]=4;
mapp[0][2]=4;
mapp[0][3]=4;
mapp[0][4]=4;
mapp[0][5]=4;
mapp[0][6]=4;
mapp[0][7]=4;
mapp[0][8]=4;
mapp[0][9]=4;
mapp[0][10]=4;
mapp[0][11]=4;
mapp[0][12]=4;
mapp[0][13]=4;
mapp[0][14]=4;
mapp[0][15]=4;
mapp[0][16]=4;
mapp[0][17]=4;
mapp[0][18]=4;
mapp[0][19]=4;
mapp[0][20]=4;
mapp[0][21]=4;
mapp[0][22]=4;
mapp[0][23]=4;
mapp[0][24]=4;
mapp[0][25]=4;
mapp[1][0]=4;
mapp[1][1]=0;
mapp[1][2]=0;
mapp[1][3]=4;
mapp[1][4]=0;
mapp[1][5]=0;
mapp[1][6]=0;
mapp[1][7]=0;
mapp[1][8]=0;
mapp[1][9]=0;
mapp[1][10]=4;
mapp[1][11]=0;
mapp[1][12]=0;
mapp[1][13]=0;
mapp[1][14]=0;
mapp[1][15]=0;
mapp[1][16]=0;
mapp[1][17]=4;
mapp[1][18]=0;
mapp[1][19]=0;
mapp[1][20]=4;
mapp[1][21]=0;
mapp[1][22]=4;
mapp[1][23]=0;
mapp[1][24]=0;
mapp[1][25]=4;
mapp[2][0]=4;
mapp[2][1]=0;
mapp[2][2]=0;
mapp[2][3]=4;
mapp[2][4]=0;
mapp[2][5]=0;
mapp[2][6]=4;
mapp[2][7]=4;
mapp[2][8]=4;
mapp[2][9]=4;
mapp[2][10]=4;
mapp[2][11]=0;
mapp[2][12]=0;
mapp[2][13]=0;
mapp[2][14]=4;
mapp[2][15]=4;
mapp[2][16]=4;
mapp[2][17]=4;
mapp[2][18]=0;
mapp[2][19]=0;
mapp[2][20]=4;
mapp[2][21]=0;
mapp[2][22]=4;
mapp[2][23]=0;
mapp[2][24]=0;
mapp[2][25]=4;
mapp[3][0]=4;
mapp[3][1]=0;
mapp[3][2]=0;
mapp[3][3]=4;
mapp[3][4]=0;
mapp[3][5]=0;
mapp[3][6]=0;
mapp[3][7]=0;
mapp[3][8]=0;
mapp[3][9]=0;
mapp[3][10]=0;
mapp[3][11]=0;
mapp[3][12]=0;
mapp[3][13]=0;
mapp[3][14]=0;
mapp[3][15]=0;
mapp[3][16]=0;
mapp[3][17]=0;
mapp[3][18]=0;
mapp[3][19]=0;
mapp[3][20]=0;
mapp[3][21]=0;
mapp[3][22]=4;
mapp[3][23]=0;
mapp[3][24]=0;
mapp[3][25]=4;
mapp[4][0]=4;
mapp[4][1]=0;
mapp[4][2]=0;
mapp[4][3]=4;
mapp[4][4]=0;
mapp[4][5]=4;
mapp[4][6]=0;
mapp[4][7]=4;
mapp[4][8]=4;
mapp[4][9]=4;
mapp[4][10]=4;
mapp[4][11]=0;
mapp[4][12]=4;
mapp[4][13]=0;
mapp[4][14]=0;
mapp[4][15]=4;
mapp[4][16]=4;
mapp[4][17]=4;
mapp[4][18]=0;
mapp[4][19]=0;
mapp[4][20]=4;
mapp[4][21]=4;
mapp[4][22]=4;
mapp[4][23]=0;
mapp[4][24]=0;
mapp[4][25]=4;
mapp[5][0]=4;
mapp[5][1]=0;
mapp[5][2]=0;
mapp[5][3]=4;
mapp[5][4]=0;
mapp[5][5]=4;
mapp[5][6]=0;
mapp[5][7]=0;
mapp[5][8]=0;
mapp[5][9]=0;
mapp[5][10]=4;
mapp[5][11]=0;
mapp[5][12]=4;
mapp[5][13]=0;
mapp[5][14]=0;
mapp[5][15]=4;
mapp[5][16]=0;
mapp[5][17]=0;
mapp[5][18]=0;
mapp[5][19]=0;
mapp[5][20]=0;
mapp[5][21]=0;
mapp[5][22]=4;
mapp[5][23]=0;
mapp[5][24]=0;
mapp[5][25]=4;
mapp[6][0]=4;
mapp[6][1]=0;
mapp[6][2]=0;
mapp[6][3]=4;
mapp[6][4]=4;
mapp[6][5]=4;
mapp[6][6]=0;
mapp[6][7]=4;
mapp[6][8]=4;
mapp[6][9]=4;
mapp[6][10]=4;
mapp[6][11]=0;
mapp[6][12]=4;
mapp[6][13]=4;
mapp[6][14]=4;
mapp[6][15]=4;
mapp[6][16]=4;
mapp[6][17]=4;
mapp[6][18]=0;
mapp[6][19]=0;
mapp[6][20]=4;
mapp[6][21]=0;
mapp[6][22]=4;
mapp[6][23]=0;
mapp[6][24]=0;
mapp[6][25]=4;
mapp[7][0]=0;
mapp[7][1]=0;
mapp[7][2]=0;
mapp[7][3]=0;
mapp[7][4]=0;
mapp[7][5]=4;
mapp[7][6]=0;
mapp[7][7]=4;
mapp[7][8]=0;
mapp[7][9]=0;
mapp[7][10]=0;
mapp[7][11]=0;
mapp[7][12]=4;
mapp[7][13]=0;
mapp[7][14]=0;
mapp[7][15]=0;
mapp[7][16]=0;
mapp[7][17]=0;
mapp[7][18]=0;
mapp[7][19]=0;
mapp[7][20]=4;
mapp[7][21]=0;
mapp[7][22]=4;
mapp[7][23]=0;
mapp[7][24]=0;
mapp[7][25]=4;
mapp[8][0]=4;
mapp[8][1]=0;
mapp[8][2]=0;
mapp[8][3]=4;
mapp[8][4]=0;
mapp[8][5]=4;
mapp[8][6]=0;
mapp[8][7]=4;
mapp[8][8]=0;
mapp[8][9]=4;
mapp[8][10]=4;
mapp[8][11]=4;
mapp[8][12]=4;
mapp[8][13]=0;
mapp[8][14]=0;
mapp[8][15]=4;
mapp[8][16]=0;
mapp[8][17]=4;
mapp[8][18]=0;
mapp[8][19]=0;
mapp[8][20]=4;
mapp[8][21]=4;
mapp[8][22]=4;
mapp[8][23]=0;
mapp[8][24]=0;
mapp[8][25]=4;
mapp[9][0]=4;
mapp[9][1]=0;
mapp[9][2]=0;
mapp[9][3]=4;
mapp[9][4]=0;
mapp[9][5]=4;
mapp[9][6]=0;
mapp[9][7]=4;
mapp[9][8]=0;
mapp[9][9]=4;
mapp[9][10]=0;
mapp[9][11]=0;
mapp[9][12]=4;
mapp[9][13]=0;
mapp[9][14]=0;
mapp[9][15]=4;
mapp[9][16]=0;
mapp[9][17]=4;
mapp[9][18]=0;
mapp[9][19]=0;
mapp[9][20]=0;
mapp[9][21]=0;
mapp[9][22]=0;
mapp[9][23]=0;
mapp[9][24]=0;
mapp[9][25]=4;
mapp[10][0]=4;
mapp[10][1]=0;
mapp[10][2]=0;
mapp[10][3]=4;
mapp[10][4]=0;
mapp[10][5]=4;
mapp[10][6]=0;
mapp[10][7]=4;
mapp[10][8]=0;
mapp[10][9]=4;
mapp[10][10]=0;
mapp[10][11]=0;
mapp[10][12]=4;
mapp[10][13]=0;
mapp[10][14]=0;
mapp[10][15]=4;
mapp[10][16]=0;
mapp[10][17]=4;
mapp[10][18]=0;
mapp[10][19]=0;
mapp[10][20]=0;
mapp[10][21]=0;
mapp[10][22]=0;
mapp[10][23]=0;
mapp[10][24]=0;
mapp[10][25]=4;
mapp[11][0]=4;
mapp[11][1]=0;
mapp[11][2]=0;
mapp[11][3]=4;
mapp[11][4]=0;
mapp[11][5]=0;
mapp[11][6]=0;
mapp[11][7]=4;
mapp[11][8]=4;
mapp[11][9]=4;
mapp[11][10]=0;
mapp[11][11]=0;
mapp[11][12]=4;
mapp[11][13]=4;
mapp[11][14]=4;
mapp[11][15]=4;
mapp[11][16]=0;
mapp[11][17]=4;
mapp[11][18]=4;
mapp[11][19]=4;
mapp[11][20]=4;
mapp[11][21]=4;
mapp[11][22]=4;
mapp[11][23]=0;
mapp[11][24]=0;
mapp[11][25]=4;
mapp[12][0]=4;
mapp[12][1]=0;
mapp[12][2]=0;
mapp[12][3]=4;
mapp[12][4]=0;
mapp[12][5]=0;
mapp[12][6]=0;
mapp[12][7]=4;
mapp[12][8]=0;
mapp[12][9]=0;
mapp[12][10]=0;
mapp[12][11]=0;
mapp[12][12]=0;
mapp[12][13]=0;
mapp[12][14]=0;
mapp[12][15]=0;
mapp[12][16]=0;
mapp[12][17]=4;
mapp[12][18]=0;
mapp[12][19]=0;
mapp[12][20]=0;
mapp[12][21]=0;
mapp[12][22]=0;
mapp[12][23]=2;
mapp[12][24]=0;
mapp[12][25]=4;
mapp[13][0]=4;
mapp[13][1]=0;
mapp[13][2]=0;
mapp[13][3]=4;
mapp[13][4]=0;
mapp[13][5]=4;
mapp[13][6]=0;
mapp[13][7]=4;
mapp[13][8]=0;
mapp[13][9]=0;
mapp[13][10]=4;
mapp[13][11]=4;
mapp[13][12]=4;
mapp[13][13]=0;
mapp[13][14]=0;
mapp[13][15]=4;
mapp[13][16]=0;
mapp[13][17]=4;
mapp[13][18]=0;
mapp[13][19]=4;
mapp[13][20]=0;
mapp[13][21]=0;
mapp[13][22]=4;
mapp[13][23]=4;
mapp[13][24]=4;
mapp[13][25]=4;
mapp[14][0]=4;
mapp[14][1]=0;
mapp[14][2]=0;
mapp[14][3]=4;
mapp[14][4]=0;
mapp[14][5]=4;
mapp[14][6]=0;
mapp[14][7]=4;
mapp[14][8]=0;
mapp[14][9]=0;
mapp[14][10]=0;
mapp[14][11]=0;
mapp[14][12]=4;
mapp[14][13]=0;
mapp[14][14]=0;
mapp[14][15]=4;
mapp[14][16]=0;
mapp[14][17]=4;
mapp[14][18]=0;
mapp[14][19]=4;
mapp[14][20]=0;
mapp[14][21]=0;
mapp[14][22]=4;
mapp[14][23]=0;
mapp[14][24]=0;
mapp[14][25]=4;
mapp[15][0]=4;
mapp[15][1]=4;
mapp[15][2]=4;
mapp[15][3]=4;
mapp[15][4]=4;
mapp[15][5]=4;
mapp[15][6]=0;
mapp[15][7]=4;
mapp[15][8]=4;
mapp[15][9]=4;
mapp[15][10]=0;
mapp[15][11]=0;
mapp[15][12]=4;
mapp[15][13]=0;
mapp[15][14]=0;
mapp[15][15]=4;
mapp[15][16]=4;
mapp[15][17]=4;
mapp[15][18]=4;
mapp[15][19]=4;
mapp[15][20]=4;
mapp[15][21]=4;
mapp[15][22]=4;
mapp[15][23]=0;
mapp[15][24]=0;
mapp[15][25]=4;
mapp[16][0]=4;
mapp[16][1]=0;
mapp[16][2]=0;
mapp[16][3]=0;
mapp[16][4]=0;
mapp[16][5]=0;
mapp[16][6]=0;
mapp[16][7]=0;
mapp[16][8]=0;
mapp[16][9]=0;
mapp[16][10]=0;
mapp[16][11]=0;
mapp[16][12]=4;
mapp[16][13]=0;
mapp[16][14]=0;
mapp[16][15]=4;
mapp[16][16]=0;
mapp[16][17]=0;
mapp[16][18]=0;
mapp[16][19]=4;
mapp[16][20]=0;
mapp[16][21]=0;
mapp[16][22]=0;
mapp[16][23]=0;
mapp[16][24]=0;
mapp[16][25]=0;
mapp[17][0]=4;
mapp[17][1]=4;
mapp[17][2]=4;
mapp[17][3]=4;
mapp[17][4]=4;
mapp[17][5]=4;
mapp[17][6]=4;
mapp[17][7]=4;
mapp[17][8]=4;
mapp[17][9]=4;
mapp[17][10]=4;
mapp[17][11]=4;
mapp[17][12]=4;
mapp[17][13]=0;
mapp[17][14]=0;
mapp[17][15]=4;
mapp[17][16]=0;
mapp[17][17]=4;
mapp[17][18]=0;
mapp[17][19]=4;
mapp[17][20]=0;
mapp[17][21]=0;
mapp[17][22]=4;
mapp[17][23]=0;
mapp[17][24]=0;
mapp[17][25]=4;
mapp[18][0]=4;
mapp[18][1]=0;
mapp[18][2]=0;
mapp[18][3]=0;
mapp[18][4]=0;
mapp[18][5]=0;
mapp[18][6]=0;
mapp[18][7]=0;
mapp[18][8]=0;
mapp[18][9]=0;
mapp[18][10]=0;
mapp[18][11]=0;
mapp[18][12]=0;
mapp[18][13]=0;
mapp[18][14]=0;
mapp[18][15]=0;
mapp[18][16]=0;
mapp[18][17]=4;
mapp[18][18]=0;
mapp[18][19]=4;
mapp[18][20]=0;
mapp[18][21]=0;
mapp[18][22]=4;
mapp[18][23]=0;
mapp[18][24]=0;
mapp[18][25]=4;
mapp[19][0]=4;
mapp[19][1]=4;
mapp[19][2]=4;
mapp[19][3]=4;
mapp[19][4]=0;
mapp[19][5]=4;
mapp[19][6]=4;
mapp[19][7]=4;
mapp[19][8]=4;
mapp[19][9]=0;
mapp[19][10]=4;
mapp[19][11]=0;
mapp[19][12]=4;
mapp[19][13]=4;
mapp[19][14]=4;
mapp[19][15]=4;
mapp[19][16]=4;
mapp[19][17]=4;
mapp[19][18]=0;
mapp[19][19]=4;
mapp[19][20]=0;
mapp[19][21]=0;
mapp[19][22]=4;
mapp[19][23]=4;
mapp[19][24]=4;
mapp[19][25]=4;
mapp[20][0]=4;
mapp[20][1]=0;
mapp[20][2]=0;
mapp[20][3]=0;
mapp[20][4]=0;
mapp[20][5]=4;
mapp[20][6]=0;
mapp[20][7]=0;
mapp[20][8]=0;
mapp[20][9]=0;
mapp[20][10]=4;
mapp[20][11]=0;
mapp[20][12]=4;
mapp[20][13]=0;
mapp[20][14]=0;
mapp[20][15]=0;
mapp[20][16]=0;
mapp[20][17]=0;
mapp[20][18]=0;
mapp[20][19]=0;
mapp[20][20]=0;
mapp[20][21]=0;
mapp[20][22]=0;
mapp[20][23]=0;
mapp[20][24]=0;
mapp[20][25]=4;
mapp[21][0]=4;
mapp[21][1]=4;
mapp[21][2]=4;
mapp[21][3]=4;
mapp[21][4]=4;
mapp[21][5]=4;
mapp[21][6]=4;
mapp[21][7]=4;
mapp[21][8]=4;
mapp[21][9]=4;
mapp[21][10]=4;
mapp[21][11]=4;
mapp[21][12]=4;
mapp[21][13]=4;
mapp[21][14]=4;
mapp[21][15]=4;
mapp[21][16]=4;
mapp[21][17]=4;
mapp[21][18]=4;
mapp[21][19]=4;
mapp[21][20]=4;
mapp[21][21]=4;
mapp[21][22]=4;
mapp[21][23]=4;
mapp[21][24]=4;
mapp[21][25]=4;
}
int item(int x, int y) {
    int xx = x / (2400/22);
    int yy = y / (3200/26);

    //printf("x %d xx %d\n", x, xx);
    //printf("y %d yy %d\n", y,yy);
    return mapp[xx][yy];
}
